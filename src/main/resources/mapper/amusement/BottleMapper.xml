<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rainchain.jasmine.mapper.amusement.BottleMapper">
    <insert id="throwBottle" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO bottle(type, qq, nick, `group`, groupName, content, anonymous, timeStamp)
        VALUES (#{type}, #{qq}, #{nick}, #{group}, #{groupName}, #{content}, #{anonymous},
                UNIX_TIMESTAMP())
    </insert>
    <insert id="comment">
        INSERT INTO bottle_reply (bottleId, qq, nick, content, anonymous, timeStamp)
        VALUES (#{bottleId}, #{qq}, #{nick}, #{content}, #{anonymous}, UNIX_TIMESTAMP())
    </insert>
    <insert id="thumbs">
        INSERT INTO bottle_thumbs(qq, id, thumbsUp, timeStamp)
        VALUES (#{qq}, #{id}, #{thumbsUp}, UNIX_TIMESTAMP())
        ON DUPLICATE KEY UPDATE thumbsUp = #{thumbsUp}
    </insert>
    <insert id="collect">
        REPLACE INTO bottle_favorites(qq, id, timeStamp)
        VALUES (#{qq}, #{id}, UNIX_TIMESTAMP())
    </insert>
    <update id="updateBottleState">
        REPLACE INTO bottle_state (id, good, bad, lastUpdated)
        SELECT id,
               SUM(IF(thumbsUp = 1, 1, 0)) AS good,
               SUM(IF(thumbsUp = 0, 1, 0)) AS bad,
               UNIX_TIMESTAMP()
        FROM bottle_thumbs
        GROUP BY id;
    </update>
    <delete id="deleteBottle">
        DELETE bottle
        <where>
            bottle.id = #{id} AND (
            bottle.qq = #{qq} OR #{qq} in
            <foreach collection="admin" item="admin" open="(" close=")" separator=",">
                #{admin}
            </foreach>
            )
        </where>
    </delete>
    <delete id="deleteComment">
        DELETE bottle_reply
        FROM bottle_reply
        WHERE bottle_reply.bottleId = #{id}
          AND bottle_reply.qq = #{qq}
    </delete>
    <delete id="deleteCollect">
        DELETE bottle_favorites
        FROM bottle_favorites
        WHERE bottle_favorites.id = #{id}
          AND bottle_favorites.qq = #{qq}
    </delete>
    <delete id="deleteBottleOnly">
        DELETE bottle
        FROM bottle
        WHERE bottle.id = #{id}
    </delete>
    <delete id="clearBottle">
        DELETE bottle,bottle_reply,bottle_thumbs,bottle_favorites
        FROM bottle
        WHERE (COALESCE((SELECT bad FROM bottle_state WHERE id = bottle.id), 0))
                  -
              (COALESCE((SELECT good FROM bottle_state WHERE id = bottle.id), 0)) > 1
    </delete>
    <select id="pickBottle" resultType="com.rainchain.jasmine.entity.Bottle">
        SELECT *
        FROM bottle
        LIMIT ${offset}, 1;
    </select>
    <select id="getReply" resultType="com.rainchain.jasmine.entity.BottleReply">
        SELECT *
        FROM bottle_reply
        WHERE bottleId = #{bottleId};
    </select>
    <select id="getThumbs" resultType="com.rainchain.jasmine.entity.BottleState">
        SELECT *
        from bottle_state
        WHERE id = #{id};
    </select>
    <select id="pickBottleById" resultType="com.rainchain.jasmine.entity.Bottle">
        SELECT *
        FROM bottle
        WHERE id = #{id}
        LIMIT 1;
    </select>
    <select id="searchBottleByQq" resultType="com.rainchain.jasmine.component.SearchBottleResult">
        SELECT id, content
        FROM bottle
        WHERE qq = #{qq}
          AND type = 1
    </select>
    <select id="searchBottleByReply" resultType="com.rainchain.jasmine.component.SearchBottleResult">
        SELECT id, content
        FROM bottle
        WHERE id IN (SELECT bottleId FROM bottle_reply WHERE qq = #{qq})
    </select>
    <select id="searchBottleByCollect" resultType="com.rainchain.jasmine.component.SearchBottleResult">
        SELECT id, content
        FROM bottle
        WHERE id IN (SELECT id FROM bottle_favorites WHERE qq = #{qq})
    </select>
    <select id="searchByKeywords" resultType="com.rainchain.jasmine.component.SearchBottleResult">
        SELECT id, content
        FROM bottle
        <where>
            <foreach collection="keywords" item="keyword" separator="AND">
                content LIKE CONCAT('%', #{keyword}, '%')
            </foreach>
        </where>
        LIMIT 100;
    </select>
    <select id="getOffset" resultType="java.lang.Integer">
        SELECT FLOOR(RAND() * COUNT(*))
        FROM bottle
    </select>
    <select id="getNum" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM bottle
    </select>
    <select id="pickWeightedBottle" resultType="com.rainchain.jasmine.entity.Bottle">
        SELECT b.*
        FROM bottle b
                 LEFT JOIN
             bottle_state bs ON b.id = bs.id
        ORDER BY RAND() * (
            POWER((COALESCE(bs.good, 0) + 5) / (COALESCE(bs.good, 0) + COALESCE(bs.bad, 0) + 10), 0.5) * (1 + 1 *
                                                                                                              GREATEST(
                                                                                                                      0.1,
                                                                                                                      EXP(GREATEST(
                                                                                                                              -50,
                                                                                                                              -((UNIX_TIMESTAMP() - b.timeStamp) / 86400) /
                                                                                                                              (14 *
                                                                                                                               (1 +
                                                                                                                                3 *
                                                                                                                                (COALESCE(bs.good, 0) /
                                                                                                                                 (COALESCE(bs.good, 0) + COALESCE(bs.bad, 0) + 1)))))))))
            DESC
        LIMIT 1;
    </select>
</mapper>